"""
Django settings for manejo_inventario project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@gn@pb(5dr62p8y%c7d)5c8t+pyq=#+l#)0&gyz+2f64*ty$^^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Configuración del backend de correo electrónico
# En este caso, usamos el backend de SMTP de Django
# para enviar correos electrónicos a través del servidor de correo Gmail

# Clase de backend de correo electrónico a usar
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Configuración del servidor de correo Gmail
# Dirección del servidor de correo
EMAIL_HOST = 'smtp.gmail.com'
# Puerto en el que se encuentra el servidor de correo
EMAIL_PORT = 587
# Indica si se debe usar TLS para conectarse al servidor de correo
EMAIL_USE_TLS = True
# Nombre de usuario con el que se autentica en el servidor de correo
EMAIL_HOST_USER = 'proyectoinventariosmantenimien@gmail.com'
# Contraseña del usuario en el servidor de correo
EMAIL_HOST_PASSWORD = 'mbjm lqqr lyrn pose'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "corsheaders",  # Middleware para habilitar el manejo de CORS en la aplicación Django
    'inventario',  # Nombre de la aplicación personalizada para gestionar el inventario
    'rest_framework',  # Framework para crear API RESTful con Django
    'drf_yasg',  # Herramienta para generar documentación interactiva de la API en formato Swagger o ReDoc
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # Middleware que maneja los encabezados CORS para permitir o restringir el acceso a la API desde otros dominios
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Middleware que sirve los archivos estáticos de manera eficiente en producción usando WhiteNoise
    "whitenoise.middleware.WhiteNoiseMiddleware",
]

ROOT_URLCONF = 'manejo_inventario.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'manejo_inventario.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

""" DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
} """

""" DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'sistema_manejo_inventario',        # Nombre de la base de datos creada
        'USER': 'root',                 # Usuario de MySQL
        'PASSWORD': 'Mantenimiento_2025',    # La contraseña que configuraste para el usuario root
        'HOST': 'localhost',            # Usamos localhost ya que la base de datos está en tu máquina
        'PORT': '3306',                 # Puerto predeterminado de MySQL
    }
} """

"""
DATABASES = {
    'default': {
        # Especifica el backend de la base de datos que se utilizará; en este caso, MySQL
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'sistema_manejo_inventario',    # Nombre de la base de datos creada
        'USER': 'root',                         # Usuario de MySQL
        # La contraseña que configuraste para el usuario root
        'PASSWORD': 'Mantenimiento_2025',
        # Usamos localhost ya que la base de datos está en tu máquina
        'HOST': 'localhost',
        'PORT': '3306',                         # Puerto predeterminado de MySQL
    }
}
"""

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',   # Especifica el backend de la base de datos que se utilizará; en este caso, MySQL
        'NAME': 'sistema_manejo_inventario',    # Nombre de la base de datos creada
        'USER': 'postgres',                         # Usuario de MySQL
        'PASSWORD': 'Mantenimiento_2025',       # La contraseña que configuraste para el usuario root
        'HOST': 'localhost',                    # Usamos localhost ya que la base de datos está en tu máquina
        'PORT': '5432',                         # Puerto predeterminado de MySQL
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Bogota'  # Zona horaria de Colombia

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# Define la URL base para acceder a los archivos estáticos (CSS, JS, imágenes) en el navegador
STATIC_URL = 'static/'
# Define la ruta en el sistema de archivos donde se recopilan los archivos estáticos al ejecutar collectstatic
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    # Define las rutas adicionales donde Django buscará archivos estáticos durante el desarrollo
    os.path.join(BASE_DIR, 'static'),
]

# Configura el almacenamiento comprimido de archivos estáticos usando WhiteNoise para servir archivos optimizados
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Permitir acceso desde cualquier sitio lo dejamos asi por el momento porque eso no se hace en producción
CORS_ORIGIN_ALLOW_ALL = True

# Define la URL base para acceder a los archivos de medios (imágenes, videos, documentos) cargados por los usuarios
MEDIA_URL = '/media/'
# Define la ruta en el sistema de archivos donde se guardan los archivos de medios subidos por los usuarios
MEDIA_ROOT = BASE_DIR / 'media'

# Establece el tipo de campo predeterminado para las claves primarias en las tablas de la base de datos, usando BigAutoField en lugar de AutoField
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
